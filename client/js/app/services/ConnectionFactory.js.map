{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,S,GAAS,CAAC,aAAD,C;AACTC,U,GAAU,C;AACVC,S,GAAS,Y;AACXC,a,GAAa,I;AACbC,Q,GAAQ,I;;gCAECC,iB;AACZ,iCAAc;AAAA;;AACb,WAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACA;;;;qCAEsB;AACtB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,WAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,mBAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACpCV,0BAAkBW,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACA,QAFD;;AAIAR,mBAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC9B,YAAI,CAACZ,UAAL,EAAiB;AAChBA,sBAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,iBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,oBAAWC,KAAX,GAAmB,YAAY;AAC9B,gBAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACA,UAFD;AAGA;AACDE,gBAAQL,UAAR;AACA,QATD;;AAWAO,mBAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AAC5BO,gBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAf,eAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,QAHD;AAIA,OAtBM,CAAP;AAuBA;;;mCAEoBtB,U,EAAY;AAChCH,aAAO0B,OAAP,CAAe,UAACC,KAAD,EAAW;AACzB,WAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAChDxB,mBAAW2B,iBAAX,CAA6BH,KAA7B;AACA;;AAEDxB,kBAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACA,OAND;AAOA;;;uCAEwB;AACxB,UAAI7B,UAAJ,EAAgB;AACfC;AACAD,oBAAa,IAAb;AACA;AACD;;;;;;;;AACD","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\r\nconst version = 4;\r\nconst dbName = \"aluraframe\";\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\tconstructor() {\r\n\t\tthrow new Error(\"Não é possível criar instâncias de ConnectionFactory\");\r\n\t}\r\n\r\n\tstatic getConnection() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet openRequest = window.indexedDB.open(dbName, version);\r\n\r\n\t\t\topenRequest.onupgradeneeded = (e) => {\r\n\t\t\t\tConnectionFactory._createStores(e.target.result);\r\n\t\t\t};\r\n\r\n\t\t\topenRequest.onsuccess = (e) => {\r\n\t\t\t\tif (!connection) {\r\n\t\t\t\t\tconnection = e.target.result;\r\n\t\t\t\t\tclose = connection.close.bind(connection);\r\n\t\t\t\t\tconnection.close = function () {\r\n\t\t\t\t\t\tthrow new Error(\"Você não pode fechar diretamente a conexão!\");\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tresolve(connection);\r\n\t\t\t};\r\n\r\n\t\t\topenRequest.onerror = (e) => {\r\n\t\t\t\tconsole.log(e.target.error);\r\n\t\t\t\treject(e.target.error.name);\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tstatic _createStores(connection) {\r\n\t\tstores.forEach((store) => {\r\n\t\t\tif (connection.objectStoreNames.contains(store)) {\r\n\t\t\t\tconnection.deleteObjectStore(store);\r\n\t\t\t}\r\n\r\n\t\t\tconnection.createObjectStore(store, { autoIncrement: true });\r\n\t\t});\r\n\t}\r\n\r\n\tstatic closeConnection() {\r\n\t\tif (connection) {\r\n\t\t\tclose();\r\n\t\t\tconnection = null;\r\n\t\t}\r\n\t}\r\n};\r\n"]}